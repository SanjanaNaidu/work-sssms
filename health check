
    
SET NOCOUNT ON

use master
go
print '------------------------'
print '----- GENERAL INFO -----'
print ''
print 'Server Name...............: ' + convert(varchar(100),@@SERVERNAME)
print 'Instance..................: ' + convert(varchar(100),@@SERVICENAME)
DECLARE @crdate DATETIME
select @crdate=login_time from master..sysprocesses where spid = 1
print 'Server started at.........: ' + convert(varchar(100),@crdate,113)
print 'Current Date Time.........: ' + convert(varchar(100),getdate(),113)
print 'User......................: ' + SUSER_NAME()
go
DECLARE @crdate DATETIME, @hr VARCHAR(50), @min VARCHAR(5)
SELECT @crdate=crdate FROM sysdatabases WHERE NAME='tempdb'
SELECT @hr=(DATEDIFF ( mi, @crdate,GETDATE()))/60
IF ((DATEDIFF ( mi, @crdate,GETDATE()))/60)=0
SELECT @min=(DATEDIFF ( mi, @crdate,GETDATE()))
ELSE
SELECT @min=(DATEDIFF ( mi, @crdate,GETDATE()))-((DATEDIFF( mi, @crdate,GETDATE()))/60)*60
PRINT 'Online time...............: '+@hr+' hours & '+@min+' minutes'
IF NOT EXISTS (SELECT 1 FROM master.dbo.sysprocesses WHERE program_name = N'SQLAgent - Generic Refresher')
BEGIN
PRINT 'SQL Server is running but SQL Server Agent <<NOT>> running'
END
Else
Begin
PRINT 'SQL Server and SQL Agent both are running properly'
End
print ''
-----------------
--##**************************************
---##Calculating SQL Server Information
--##**************************************
--"
--"
select
CAST( SERVERPROPERTY('MachineName') AS NVARCHAR(20)) AS [MachineName],
CAST( SERVERPROPERTY('IsClustered') AS NVARCHAR(20)) AS [IsClustered],
CAST( SERVERPROPERTY('ComputerNamePhysicalNetBIOS')AS NVARCHAR(20)) AS [SQLService_Current_Node],
CAST(serverproperty('edition') as nvarchar(20)) as [Edition],
CAST( serverproperty('productlevel')AS NVARCHAR(10)) as ServicePack,
SERVERPROPERTY('Productversion') AS [ProductVersion]
--@@version as [Serverversion]

Select '---- SQL SERVICES -----'
---------------
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE ID = OBJECT_ID(N'tempdb..#sql_agent_state'))
BEGIN
drop table #sql_agent_state
END
declare @sql_agent_service varchar(128),@state_sql_agent varchar(20)
create table #sql_agent_state(service_name varchar(128) default 'SQLAgent ' ,state varchar(20))
insert into #sql_agent_state(state) exec xp_servicecontrol N'querystate',N'SQLServerAGENT'
--select service_name as ServiceName, state as Status from #sql_agent_state
select convert(varchar(20), service_name) as ServiceName, replace(state,'.','') as Status from #sql_agent_state
--------------------
Select '---- OFFLINE DATABASES -----'
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE ID = OBJECT_ID(N'tempdb..#tmp_database'))
BEGIN
drop table #tmp_database
END
declare @count int
declare @name varchar(128)
declare @state_desc varchar(128)
SET NOCOUNT ON
select @count = COUNT(*) from sys.databases where state_desc not in ('ONLINE','RESTORING')
create table #tmp_database (name nvarchar(128),state_desc nvarchar(128))
if @count > 0
begin
Declare Cur1 cursor for select name,state_desc from sys.databases
where state_desc not in ('ONLINE','RESTORING')
open Cur1
FETCH NEXT FROM Cur1 INTO @name,@state_desc
WHILE @@FETCH_STATUS = 0
BEGIN
insert into #tmp_database values(@name,@state_desc)
FETCH NEXT FROM Cur1 INTO @name,@state_desc
END
CLOSE Cur1
DEALLOCATE Cur1
end
else
begin
insert into #tmp_database values('ALL DATABASES ARE','ONLINE')
end
select convert(varchar(40),name) as DBName ,state_desc as DBStatus from #tmp_database
---------------

--------------------
Select '---- JOB STATUS -----'
SET NOCOUNT ON
select @count = COUNT(1)
FROM msdb.dbo.sysjobs A(NOLOCK), msdb.dbo.sysjobservers B(NOLOCK)
WHERE A.job_id = B.job_id AND B.last_run_outcome = 0
IF @count > 1
begin
SELECT name, B.last_run_outcome AS [JOB's FALLIDOS]
FROM msdb.dbo.sysjobs A(NOLOCK), msdb.dbo.sysjobservers B(NOLOCK)
WHERE A.job_id = B.job_id AND B.last_run_outcome = 0
end
else
BEGIN
select 'NO Failed JOBS found in the last 24HRS'
END
----------------
--------------------
Select '---- FAILED BACKUPS-----'
declare @backupcount int
select @backupcount = count(1)
from sys.databases
where state != 6
and name not like 'Tempdb%'
and name not in
(
select database_name
from msdb.dbo.backupset as bkupset
join msdb.dbo.backupmediafamily as bkupmedf on bkupset.media_set_id = bkupmedf.media_set_id
where type in ('D','I')
and backup_start_date > (CONVERT(datetime,getdate()) - 1)
)
if (@backupcount >= 1)
begin
select name as DBName, State_Desc as DBStatus,'Backup Not happened' as DBComments from sys.databases
where state != 6
and name not like 'Tempdb%'
and name not in
(
select database_name
from msdb.dbo.backupset as bkupset
join msdb.dbo.backupmediafamily as bkupmedf on bkupset.media_set_id = bkupmedf.media_set_id
where type in ('D','I')
--and backup_start_date > (CONVERT(datetime,getdate()) - 1)
)
order by 1
end
else
begin
Select 'ALL Databases has been' as DBName,
'backup' as DBStatus ,'in Last 24 Hours' as DBComments
end

--------------------
Select '---- SQLSERVER ERROR LOG -----'
declare @errorlogcount int
declare @fecha1 varchar(10), @fecha2 varchar(10)
select @fecha1 = convert(varchar,getdate(),112)
select @fecha2 = convert(varchar,(CONVERT(datetime,getdate()) - 1),112)
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE ID = OBJECT_ID(N'tempdb..#errorlog'))
BEGIN
DROP TABLE #errorlog
END
create table #errorlog(date_time datetime,processinfo varchar(123),Comments varchar(max))
insert into #errorlog exec xp_readerrorlog 0, 1, NULL,null,@fecha2,@fecha1

select @errorlogcount = count(*) from #errorlog
where date_time > (CONVERT(datetime,getdate()) - 2)
and Comments like '%fail%'
and Comments like '%error%'
and processinfo not in ('Server','Logon')
if(@errorlogcount >= 1)
begin
select date_time as Date,processinfo as ProcessInfo, Comments from #errorlog
where date_time > (CONVERT(datetime,getdate()) - 2)
and Comments like '%fail%'
and Comments like '%error%'
and processinfo not in ('Server','Logon')
end
else
begin
select 'Error Log' as Date, 'check did not find out anything major'
as ProcessInfo, 'but will still advise to please verify manually' as Comments
end
